{"version":3,"sources":["config/configFile.js","services/curWeather.service.js","services/forecast.service.js","helpFunctions.js","components/weatherView/weather.item.js","components/weatherView/5-days-forecast.js","components/common/Like.js","components/weatherView/weather.view.js","redux/actions.js","components/pages/main.page.js","services/locationAutocomplete.service.js","components/pages/favorites.page.js","components/pages/404.page.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["API_KEY","process","api_key","areaCode","a","async","url","fetch","todayRaw","json","console","log","isMetric","forecastRaw","DAYS","isEmpty","obj","prop","hasOwnProperty","getTemp","tempObj","Metric","Imperial","Value","Unit","getImg","imgNum","temperature","text","date","city","link","icon","className","dateObj","Date","getDay","getDayOfWeek","to","src","alt","forecast","DailyForecasts","map","day","index","range","first","second","firstAsFloat","parseFloat","secondeAsFloat","Math","min","max","getRange","Temperature","Minimum","Maximum","key","Day","IconPhrase","Icon","Like","props","classes","liked","aria-hidden","style","cursor","onClick","connect","state","favorites","dispatch","addToFavorites","newFavorite","type","payload","removeFromFavorites","locationObj","useState","curWeatherObj","forecastWeatherObj","weatherObj","updateWeather","toggleLiked","useEffect","forecastService","Key","forecastWeather","curWeatherService","curWeather","arr","Object","keys","includes","Jumbotron","Container","textAlign","Row","LocalizedName","WeatherText","WeatherIcon","toLocaleTimeString","timeStyle","useParams","cityid","selectedObj","setSelectedObj","debouncedLoadOptions","_","debounce","inputValue","getAsyncOptions","Promise","resolve","reject","filteredArr","value","autoCompleteRaw","autoCompleteService","then","res","label","marginTop","Col","sm","cacheOptions","defaultOptions","isClearable","classNamePrefix","name","loadOptions","onChange","newObj","favoriteKey","cityName","changeTempType","metric","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Nav","alignItems","defaultChecked","icons","checked","unchecked","exact","path","Boolean","window","location","hostname","match","initialState","store","createStore","action","new_favorites","object","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f84327be.chunk.js","sourcesContent":["export const API_KEY = process.env.api_key || 'MYiJh6BXB2M73G7QJ7GOitkVtihQAITI';\nexport const DEFAULT_LOCATION_ID = '215854';\nexport const DEFAULT_LOCATION_NAME = 'Tel Aviv';\n","import {API_KEY} from '../config/configFile';\n\nexport default async (areaCode) => {\n     try {\n          const url = `http://dataservice.accuweather.com/currentconditions/v1/${areaCode}?apikey=${API_KEY}&details=true`;\n          const todayRaw = await fetch(url);\n          return await todayRaw.json();\n     }\n     catch(err) {\n          console.log(`Following error accured while trying to fetch data: ${err}`);\n          return {};\n     }\n    \n    \n} \n","import {API_KEY} from '../config/configFile';\n\nexport default async (areaCode, isMetric) => {\n\n    try{\n        const url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${areaCode}?apikey=${API_KEY}&metric=${isMetric}`;\n        const forecastRaw = await fetch(url);\n        return forecastRaw.json();\n    }\n\n    catch(err) {\n        console.log(`Following error accured while trying to fetch data: ${err}`);\n        return {};\n   }\n\n\n} ","const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n\nexport function isEmpty(obj) {\n    for(var prop in obj) {\n        if(obj.hasOwnProperty(prop))\n            return false;\n    }\n\n    return true;\n}\n\nexport const getRange = (first, second) => {\n    const firstAsFloat = parseFloat(first);\n    const secondeAsFloat = parseFloat(second);\n    return `${Math.min(firstAsFloat, secondeAsFloat)} - ${Math.max(firstAsFloat, secondeAsFloat)}`;\n\n\n}\n\nexport const isKeyInArr = (key, arr) => {\n    const keys = Object.keys(arr);\n    return keys.includes(key); \n}\n\nexport const getDayOfWeek = (date) => {\n    const dateObj = new Date(date);\n    var dayName = DAYS[dateObj.getDay()];\n    return dayName;\n}\n\nexport const getTemp = (obj, isMetric) => {\n    const tempObj = isMetric ? obj.Metric : obj.Imperial;\n    return (`${tempObj.Value}°${tempObj.Unit}`);\n\n}\n\nexport const getImg = (imgNum) => {\n    if (imgNum < 10){\n        return (`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/0${imgNum}-s.png`);\n    } else {\n        return (`https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${imgNum}-s.png`);\n\n    }\n    \n}","import React from 'react';\nimport '../../themes/cardsDisplay.scss';\nimport { getDayOfWeek, getImg } from '../../helpFunctions';\nimport {Link} from 'react-router-dom';\n\nexport default ({temperature, text, date, city, link, icon}) =>{\n    \n    return (\n        <div className=\"item card\">\n            \n            <h3>{city}</h3>\n            {\n                date && <h4>{getDayOfWeek(date)}</h4>\n            }\n            <h5 className=\"card-title\">{temperature}</h5>\n            <p className=\"card-text\">{text}</p>\n            {\n                link && <Link to={`/main${link}`}><button className=\"btn btn-primary\">See weather</button></Link>\n            }\n            {\n                icon && <img src={getImg(icon)} alt=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Smiley.svg/1024px-Smiley.svg.png\"></img>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport Item from './weather.item';\nimport {getRange} from '../../helpFunctions';\n\nexport default ({forecast}) => {\n    return (\n        \n            <div className=\"frame\">\n                {\n\n                forecast.DailyForecasts.map((day, index) => {\n                    const range = `${getRange(forecast.DailyForecasts[index].Temperature.Minimum.Value, forecast.DailyForecasts[index].Temperature.Maximum.Value)}°${forecast.DailyForecasts[index].Temperature.Maximum.Unit}`;\n                    \n                    return  <Item key={index} temperature={range} text={forecast.DailyForecasts[index].Day.IconPhrase} icon={forecast.DailyForecasts[index].Day.Icon} date={forecast.DailyForecasts[index].Date}/>\n\n                })\n            }\n            </div>\n        \n \n    )\n}","import React from \"react\";\n\nconst Like = props => {\n  let classes = \"fa fa-heart\";\n  if (!props.liked) classes += \"-o\";\n  return (\n    <i\n      className={classes}\n      aria-hidden=\"true\"\n      style={{ cursor: \"pointer\" }}\n      onClick={props.onClick}\n    />\n  );\n};\n\nexport default Like;\n","import React, { useEffect, useState } from 'react';\nimport {connect} from 'react-redux';\nimport curWeatherService from '../../services/curWeather.service';\nimport forecastService from '../../services/forecast.service';\nimport Forecast from '../weatherView/5-days-forecast';\nimport {isEmpty, isKeyInArr, getTemp, getImg} from '../../helpFunctions';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport {Container, Row} from 'reactstrap';\nimport Like from '../common/Like';\nimport {addFavorite, removeFavorite} from '../../redux/actions';\nimport '../../themes/view.scss';\n\nexport const View = ({ locationObj, favorites, addToFavorites, removeFromFavorites, isMetric }) => {\n\n    const [weatherObj, updateWeather] = useState({\n        curWeatherObj: {},\n        forecastWeatherObj: {}\n\n    });\n    const [liked, toggleLiked] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            const forecastWeather = await forecastService(locationObj.Key, isMetric);\n            const curWeather = await curWeatherService(locationObj.Key);\n\n\n            updateWeather({\n                curWeatherObj: curWeather[0],\n                forecastWeatherObj: forecastWeather\n            });\n            toggleLiked(isKeyInArr(locationObj.Key, favorites));\n            \n        })()\n\n    }, [locationObj, favorites, isMetric]);\n\n\n    const handleLike = () => {\n        \n        liked ? removeFromFavorites(locationObj.Key) : addToFavorites({'key': locationObj.Key,\n                                                                        'object' : {'cityName': locationObj.LocalizedName, \n                                                                                    'temperature': weatherObj.curWeatherObj.Temperature,\n                                                                                    'text': weatherObj.curWeatherObj.WeatherText}});\n        toggleLiked(!liked);\n    }\n\n    return (\n        <>\n            { !isEmpty(weatherObj.curWeatherObj) && \n                (<Jumbotron>\n                    <Container style={{textAlign: 'center'}}>\n                        <>\n                            <Row className=\"justify-content-center\">\n                                <h2>{locationObj.LocalizedName} </h2>\n                                <Like liked={liked} onClick={handleLike} />\n                            </Row>\n                            <h1>{getTemp(weatherObj.curWeatherObj.Temperature, isMetric)}</h1>\n                            <p>{weatherObj.curWeatherObj.WeatherText}</p>\n                            <img src={getImg(weatherObj.curWeatherObj.WeatherIcon)} alt=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Smiley.svg/1024px-Smiley.svg.png\"></img>\n                            <p className=\"card-text\"><small className=\"text-muted\">Last updated on {new Date().toLocaleTimeString({timeStyle: 'short'})}</small></p>\n\n                        </>\n                    </Container>\n              </Jumbotron>)\n            }\n            { !isEmpty(weatherObj.forecastWeatherObj) && <Forecast forecast={weatherObj.forecastWeatherObj}/> }\n        </>\n    )\n}\n\nexport default connect (\n    function(state) {\n        return {\n            favorites: state.favorites,\n            isMetric: state.isMetric\n        }\n    },\n    function(dispatch) {\n        return {\n            addToFavorites: (newFavorite) => dispatch(addFavorite(newFavorite)),\n            removeFromFavorites: (key) => dispatch(removeFavorite(key))\n        }\n    })(View);\n\n","export const ADD_FAVORITE = 'Add favorite';\nexport const REMOVE_FAVORITE = 'Remove favorite';\nexport const TOGGLE_TEMP = 'Toggle temperature';\n\nexport const addFavorite = (favorite) => {\n    return {\n        type: ADD_FAVORITE,\n        payload: favorite\n    }\n\n}\n\nexport const removeFavorite = (favorite) => {\n    return {\n        type: REMOVE_FAVORITE,\n        payload: favorite\n    }\n\n}\n\nexport const toggleMetric = (metric) => {\n    return {\n        type: TOGGLE_TEMP,\n        payload: metric\n    }\n\n}","import React, { useState } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport View from '../weatherView/weather.view';\nimport autoCompleteService from '../../services/locationAutocomplete.service';\nimport {  DEFAULT_LOCATION_ID, DEFAULT_LOCATION_NAME } from '../../config/configFile';\nimport {Container, Col, Row} from 'reactstrap';\nimport _ from \"lodash\";\nimport {useParams} from \"react-router-dom\";\n\nexport default () => {\n\n    let { city, cityid } = useParams();\n    const [selectedObj, setSelectedObj] = useState((city && cityid) ?  { Key: cityid, LocalizedName: city } : { Key: DEFAULT_LOCATION_ID, LocalizedName: DEFAULT_LOCATION_NAME });\n    \n    const wait = 500; \n    const loadOptions = inputValue => getAsyncOptions(inputValue);\n    const debouncedLoadOptions = _.debounce(loadOptions, wait);\n\n    const getAsyncOptions = (inputValue) => {\n        if(inputValue){\n            return new Promise((resolve, reject) => {\n\n                let filteredArr;\n                autoCompleteService(inputValue).then((res) => {\n                    filteredArr = res ? res.map(city => {\n                        return {value: city.Key, label: city.LocalizedName}\n                    }) : []\n                    resolve(filteredArr);\n                });    \n            });\n\n        }\n        \n  }\n\n    const updateLocation = newObj =>{\n        setSelectedObj({ Key: newObj.value, LocalizedName: newObj.label });\n    }\n\n    return (\n        <>  \n        <Container style={{marginTop: '1%'}}>\n            <Row className=\"justify-content-center\">\n                <Col sm={6}>\n                    <AsyncSelect\n                        cacheOptions\n                        defaultOptions\n                        isClearable\n                        className=\"basic-single\"\n                        classNamePrefix=\"select\"\n                        name=\"search\"\n                        loadOptions={inputValue => debouncedLoadOptions(inputValue)}\n                        onChange={updateLocation}\n                    />                \n                </Col>\n            </Row>\n            \n        </Container>\n         <View locationObj={selectedObj}/>\n        </>\n    );\n}","import {API_KEY} from '../config/configFile';\n\nexport default async (value) => {\n\n    try {\n        const url = `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${value}`;\n        const autoCompleteRaw = await fetch(url);\n        return autoCompleteRaw.json();\n    }\n\n    catch(err) {\n        console.log(`Following error accured while trying to fetch data: ${err}`);\n        return {};\n   }\n} ","import React from 'react';\nimport Item from '../weatherView/weather.item';\nimport {connect} from 'react-redux';\nimport '../../themes/cardsDisplay.scss';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport '../../themes/view.scss';\nimport {getTemp} from '../../helpFunctions';\n\nconst favorites = ({favorites, isMetric}) => {\n    return (\n        \n        <Jumbotron>\n            <h2>My Favorites</h2>\n            <div className=\"frame\">\n            {\n                Object.keys(favorites).map((favoriteKey, index) => {\n                    return <Item key={index} city={favorites[favoriteKey].cityName} temperature={getTemp(favorites[favoriteKey].temperature, isMetric)} text={favorites[favoriteKey].text}\n                                link={`/${favorites[favoriteKey].cityName}/${favoriteKey}`} />\n                })\n\n            }\n            </div>\n\n        </Jumbotron>\n    );\n}\n\nexport default connect(\n    function(state) {\n        return {\n            favorites: state.favorites,\n            isMetric: state.isMetric\n\n        }\n    }\n\n)(favorites);","import React from 'react';\n\nexport default () => {\n    return (\n        <h1>Page not found!</h1>\n    );\n}","import React from 'react';\nimport Main from './components/pages/main.page';\nimport Favorites from './components/pages/favorites.page';\nimport NotFound from './components/pages/404.page';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Toggle from 'react-toggle'\nimport { connect } from 'react-redux';\nimport {toggleMetric} from './redux/actions';\nimport './themes/toggle.scss';\n\n\nfunction App({isMetric, changeTempType}) {\n  return (\n    <>\n      <Router>\n        <Navbar bg=\"light\" expand=\"sm\">\n          <Link className=\"navbar-brand\" to=\"/main\">Weather</Link>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\"  style={{alignItems: 'center'}}>\n              <Link className=\"nav-link\" to=\"/main\">Main</Link>\n              <Link className=\"nav-link\" to=\"/favorites\">Favorites</Link>\n              <Toggle\n                defaultChecked={isMetric}\n                icons={{\n                  checked: 'C',\n                  unchecked: 'F',\n                }}\n                onChange={() => changeTempType()} />\n            </Nav>\n          </Navbar.Collapse>\n          </Navbar>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Main />\n          </Route>\n\n          <Route exact path=\"/main\">\n            <Main />\n          </Route>\n          \n          <Route path=\"/main/:city/:cityid\">\n            <Main />\n          </Route>\n\n          <Route exact path=\"/favorites\">\n            <Favorites />\n          </Route>\n\n          <Route path=\"**\">\n            <NotFound />\n          </Route>  \n        </Switch>\n    </Router>\n  </>\n\n  );\n}\n\n\nexport default connect(\n  function(state) {\n    return {\n        isMetric: state.isMetric\n    }\n},\nfunction(dispatch) {\n    return {\n        changeTempType: () => dispatch(toggleMetric()),\n    }\n\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_FAVORITE, REMOVE_FAVORITE, TOGGLE_TEMP} from './actions';\n\nconst initialState = {\n    favorites: {},\n    isMetric: true\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case ADD_FAVORITE:\n            {\n                ;\n                let new_favorites = {...state.favorites};\n                new_favorites[action.payload.key] = action.payload.object;\n                return {...state, favorites: new_favorites};\n            }\n\n        case REMOVE_FAVORITE:\n            {\n                let new_favorites = {...state.favorites};\n                let key = action.payload;\n                delete new_favorites[key];\n                return {...state, favorites: new_favorites};\n            }\n        case TOGGLE_TEMP:\n            return {...state, isMetric: !state.isMetric};\n\n        default:\n            return state;\n    }\n}","import {createStore} from 'redux';\nimport {reducer} from '../redux/reducer';\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}