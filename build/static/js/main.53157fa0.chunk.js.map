{"version":3,"sources":["helpFunctions.js","components/weatherView/weather.item.js","config/configFile.js","services/curWeather.service.js","services/forecast.service.js","components/weatherView/5-days-forecast.js","components/common/Like.js","components/weatherView/weather.view.js","redux/actions.js","components/pages/main.page.js","services/locationAutocomplete.service.js","components/pages/favorites.page.js","components/pages/404.page.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["DAYS","isEmpty","obj","prop","hasOwnProperty","temperature","text","date","city","locationId","className","dateObj","Date","getDay","getDayOfWeek","API_KEY","areaCode","a","async","url","fetch","todayRaw","json","forecastRaw","forecast","Container","Row","DailyForecasts","map","day","index","range","first","second","firstAsFloat","parseFloat","secondeAsFloat","Math","min","max","getRange","Temperature","Minimum","Value","Maximum","Col","key","Day","IconPhrase","Like","props","classes","liked","aria-hidden","style","cursor","onClick","connect","state","favorites","dispatch","addToFavorites","newFavorite","type","payload","removeFromFavorites","locationObj","useState","curWeatherObj","forecastWeatherObj","weatherObj","updateWeather","toggleLiked","useEffect","forecastService","Key","forecastWeather","curWeatherService","curWeather","arr","Object","keys","includes","Jumbotron","textAlign","LocalizedName","Metric","WeatherText","toLocaleTimeString","timeStyle","selectedObj","setSelectedObj","debouncedLoadOptions","_","debounce","inputValue","getAsyncOptions","Promise","resolve","reject","filteredArr","value","autoCompleteRaw","autoCompleteService","then","res","label","sm","cacheOptions","defaultOptions","isClearable","classNamePrefix","name","loadOptions","onChange","newObj","favoriteKey","cityName","App","Navbar","bg","expand","to","Toggle","aria-controls","Collapse","id","Nav","exact","path","Boolean","window","location","hostname","match","initialState","store","createStore","action","new_favorites","object","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53157fa0.chunk.js","sourcesContent":["const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n\nexport function isEmpty(obj) {\n    for(var prop in obj) {\n        if(obj.hasOwnProperty(prop))\n            return false;\n    }\n\n    return true;\n}\n\nexport const getRange = (first, second) => {\n    const firstAsFloat = parseFloat(first);\n    const secondeAsFloat = parseFloat(second);\n    return `${Math.min(firstAsFloat, secondeAsFloat)} - ${Math.max(firstAsFloat, secondeAsFloat)}`;\n\n\n}\n\nexport const isKeyInArr = (key, arr) => {\n    const keys = Object.keys(arr);\n    return keys.includes(key); \n}\n\nexport const getDayOfWeek = (date) => {\n    const dateObj = new Date(date);\n    var dayName = DAYS[dateObj.getDay()];\n    return dayName;\n}","import React from 'react';\nimport '../../themes/cardsDisplay.scss';\nimport { getDayOfWeek } from '../../helpFunctions';\n\nexport default ({temperature, text, date, city, locationId}) =>{\n\n\n    return (\n        <div className=\"card\">\n            {\n                <div className=\"card-body\">\n                    <h3>{city}</h3>\n                    <h5>{locationId}</h5>\n\n                    {\n                        date && <h4>{getDayOfWeek(date)}</h4>\n\n                    }\n                    <h5 className=\"card-title\">{temperature}</h5>\n                    <p className=\"card-text\">{text}</p>\n                </div>\n            }\n            \n        </div>\n    )\n\n}","export const API_KEY = 'wkBRW6g6mRh12oaMakXqUw4y2nBiunuw';\nexport const ANOTHER_ONE = 'MYiJh6BXB2M73G7QJ7GOitkVtihQAITI';\nexport const DEFAULT_LOCATION_ID = '215854';\nexport const DEFAULT_LOCATION_NAME = 'Tel Aviv';\n\n","import {API_KEY} from '../config/configFile';\nimport {curWeather} from '../config/mockResponses';\n\nexport default async (areaCode) => {\n     const url = `http://dataservice.accuweather.com/currentconditions/v1/${areaCode}?apikey=${API_KEY}&details=true`;\n     const todayRaw = await fetch(url);\n     return await todayRaw.json();\n    \n} \n\n// export default (areaCode) => {\n//     // const url = `http://dataservice.accuweather.com/currentconditions/v1/${areaCode}?apikey=${API_KEY}`;\n//     // const todayRaw = await fetch(url);\n//     // return await todayRaw.json();\n//     const cur =  curWeather;\n//     return curWeather;\n    \n// } \n\n","import {API_KEY} from '../config/configFile';\nimport {forecast} from '../config/mockResponses';\n\nexport default async (areaCode) => {\n    const url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${areaCode}?apikey=${API_KEY}&metric=true`;\n    const forecastRaw = await fetch(url);\n    return forecastRaw.json();\n\n\n} \n\n// export default (areaCode) => {\n//     // const url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${areaCode}?apikey=${API_KEY}`;\n//     // const forecastRaw = await fetch(url);\n//     // return forecastRaw.json();\n//     const forc = forecast;\n//     return forc;\n\n// } ","import React from 'react';\nimport Item from './weather.item';\nimport {getRange} from '../../helpFunctions';\nimport {Container, Col, Row} from 'reactstrap';\nimport {getDayOfWeek} from '../../helpFunctions';\n\nexport default ({forecast}) => {\n    return (\n        <Container className=\"view\">\n            <Row>\n                {\n                    forecast.DailyForecasts.map((day, index) => {\n                        const range = getRange(forecast.DailyForecasts[index].Temperature.Minimum.Value, forecast.DailyForecasts[index].Temperature.Maximum.Value);\n                        return (<Col>\n                                    <Item key={index} temperature={range} text={forecast.DailyForecasts[index].Day.IconPhrase} date={forecast.DailyForecasts[index].Date}/>\n                                </Col>\n                        )\n                    })\n\n                }\n\n            </Row>\n        </Container>\n        \n    )\n}","import React from \"react\";\n\nconst Like = props => {\n  let classes = \"fa fa-heart\";\n  if (!props.liked) classes += \"-o\";\n  return (\n    <i\n      className={classes}\n      aria-hidden=\"true\"\n      style={{ cursor: \"pointer\" }}\n      onClick={props.onClick}\n    />\n  );\n};\n\nexport default Like;\n","import React, { useEffect, useState } from 'react';\nimport {connect} from 'react-redux';\nimport Item from './weather.item';\nimport curWeatherService from '../../services/curWeather.service';\nimport forecastService from '../../services/forecast.service';\nimport Forecast from '../weatherView/5-days-forecast';\nimport useWeather from '../../customHooks/useWeather.hook';\nimport { curWeather } from '../../config/mockResponses';\nimport {isEmpty, isKeyInArr} from '../../helpFunctions';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport {Container, Col, Row} from 'reactstrap';\nimport Like from '../common/Like';\nimport {addFavorite, removeFavorite} from '../../redux/actions';\n\n\n\nexport const View = ({ locationObj, favorites, addToFavorites, removeFromFavorites }) => {\n\n    const [weatherObj, updateWeather] = useState({\n        curWeatherObj: {},\n        forecastWeatherObj: {}\n\n    });\n    const [liked, toggleLiked] = useState(false);\n\n\n    useEffect(() => {\n        (async () => {\n            const forecastWeather = await forecastService(locationObj.Key);\n            const curWeather = await curWeatherService(locationObj.Key);\n\n            updateWeather({\n                curWeatherObj: curWeather[0],\n                forecastWeatherObj: forecastWeather\n            });\n            toggleLiked(isKeyInArr(locationObj.Key, favorites));\n            \n        })()\n\n    }, [locationObj]);\n\n       \n\n        // () => {\n        //     const curWeather = curWeatherService(locationObj.Key);\n        //     updateCurWeatherObj(curWeather[0]);\n            \n        //     const forecastWeather = forecastService(locationObj.Key);\n        //     updateForecastWeatherObj(forecastWeather);\n  \n            \n        // } ,[locationObj]); \n\n    const handleLike = () => {\n        \n        liked ? removeFromFavorites(locationObj.Key) : addToFavorites({'key': locationObj.Key, 'object' : {'cityName': locationObj.LocalizedName, \n                                                                                            'temperature': weatherObj.curWeatherObj.Temperature.Metric.Value,\n                                                                                            'text': weatherObj.curWeatherObj.WeatherText}});\n        toggleLiked(!liked);\n    }\n\n    \n    return (\n       \n        <>\n            { !isEmpty(weatherObj.curWeatherObj) && \n                (<Jumbotron>\n                    <Container style={{textAlign: 'center'}}>\n                        <>\n                            <Row className=\"justify-content-center\">\n                                <h2>{locationObj.LocalizedName} </h2>\n                                <Like liked={liked} onClick={handleLike} />\n                            </Row>\n                            \n\n                            <h1>{weatherObj.curWeatherObj.Temperature.Metric.Value}</h1>\n                            <p>{weatherObj.curWeatherObj.WeatherText}</p>\n                            <p className=\"card-text\"><small className=\"text-muted\">Last updated on {new Date().toLocaleTimeString({timeStyle: 'short'})}</small></p>\n\n                        </>\n                    </Container>\n              </Jumbotron>)\n            }\n            { !isEmpty(weatherObj.forecastWeatherObj) && <Forecast forecast={weatherObj.forecastWeatherObj}/> }\n        </>\n    )\n}\n\nexport default connect (\n    function(state) {\n        return {\n            favorites: state.favorites\n        }\n    },\n    function(dispatch) {\n        return {\n            addToFavorites: (newFavorite) => dispatch(addFavorite(newFavorite)),\n            removeFromFavorites: (key) => dispatch(removeFavorite(key))\n        }\n    }\n)(View);\n\n","export const ADD_FAVORITE = 'Add favorite';\nexport const REMOVE_FAVORITE = 'Remove favorite';\n\n\nexport const addFavorite = (favorite) => {\n    return {\n        type: ADD_FAVORITE,\n        payload: favorite\n    }\n\n}\n\nexport const removeFavorite = (favorite) => {\n    return {\n        type: REMOVE_FAVORITE,\n        payload: favorite\n    }\n\n}","import React, { useState, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport View from '../weatherView/weather.view';\nimport autoCompleteService from '../../services/locationAutocomplete.service';\nimport {API_KEY, DEFAULT_LOCATION_ID, DEFAULT_LOCATION_NAME} from '../../config/configFile';\nimport {Container, Col, Row} from 'reactstrap';\nimport _ from \"lodash\";\n\n\nexport default () => {\n\n    const [selectedObj, setSelectedObj] = useState({ Key: DEFAULT_LOCATION_ID, LocalizedName: DEFAULT_LOCATION_NAME });\n    // const [options, setOptions] = useState({});\n    \n    const wait = 500; \n    const loadOptions = inputValue => getAsyncOptions(inputValue);\n    const debouncedLoadOptions = _.debounce(loadOptions, wait);\n\n    const getAsyncOptions = (inputValue) => {\n        if(inputValue){\n            return new Promise((resolve, reject) => {\n\n                let filteredArr;\n                autoCompleteService(inputValue).then((res) => {\n                    filteredArr = res ? res.map(city => {\n                        return {value: city.Key, label: city.LocalizedName}\n                    }) : []\n                    resolve(filteredArr);\n                });    \n            });\n\n        }\n        \n  }\n\n    const updateLocation = newObj =>{\n        setSelectedObj({ Key: newObj.value, LocalizedName: newObj.label });\n    }\n\n    return (\n        <>  \n        <Container>\n            <Row className=\"justify-content-center\">\n                <Col sm={6}>\n                    <AsyncSelect\n                        cacheOptions\n                        defaultOptions\n                        isClearable\n                        className=\"basic-single\"\n                        classNamePrefix=\"select\"\n                        name=\"search\"\n                        loadOptions={inputValue => debouncedLoadOptions(inputValue)}\n                        onChange={updateLocation}\n                    />                \n                </Col>\n            </Row>\n            \n        </Container>\n         <View locationObj={selectedObj}/>\n            \n        </>\n    );\n}","import {API_KEY} from '../config/configFile';\nimport {autoComplete} from '../config/mockResponses';\n\n\nexport default async (value) => {\n    const url = `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${value}`;\n    const autoCompleteRaw = await fetch(url);\n    return autoCompleteRaw.json();\n\n} \n\n// export default  (value) => {\n//     // const url = `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${value}`;\n//     // const autoCompleteRaw = await fetch(url);\n//     // return autoCompleteRaw.json();\n\n//     const auto =  autoComplete;\n\n//     return auto;\n// } ","import React from 'react';\nimport Item from '../weatherView/weather.item';\nimport {connect} from 'react-redux';\nimport '../../themes/cardsDisplay.scss';\nimport {Container, Col, Row} from 'reactstrap';\n\nconst favorites = ({favorites}) => {\n    return (\n        <>\n            <h1>My favorites</h1>\n            <Container className=\"view\">\n            <Row>\n                {\n                    Object.keys(favorites).map((favoriteKey, index) => {\n                        return <Item key={index} locationId={favoriteKey} city={favorites[favoriteKey].cityName} temperature={favorites[favoriteKey].temperature} text={favorites[favoriteKey].text} />\n                    })\n\n                }\n\n            </Row>\n        </Container>\n        </>\n\n\n    );\n}\n\nexport default connect(\n    function(state) {\n        return {\n            favorites: state.favorites\n\n        }\n    }\n\n)(favorites);","import React from 'react';\n\nexport default () => {\n    return (\n        <h1>Page not found!</h1>\n    );\n}","import React from 'react';\nimport Main from './components/pages/main.page';\nimport Favorites from './components/pages/favorites.page';\nimport NotFound from './components/pages/404.page';\nimport {Navbar, Nav, NavItem} from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n\n      \n      <Router>\n\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Link className=\"navbar-brand\" to=\"/main\">Weather</Link>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {/* <Nav.Link href=\"#home\">Home</Nav.Link> */}\n              <Link className=\"nav-link\" to=\"/main\">Main</Link>\n              {/* <Nav.Link href=\"#link\">Link</Nav.Link> */}\n              <Link className=\"nav-link\" to=\"/favorites\">Favorites</Link>\n            </Nav>\n          </Navbar.Collapse>\n          </Navbar>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Main />\n          </Route>\n\n          <Route exact path=\"/main\">\n            <Main />\n          </Route>\n\n          <Route exact path=\"/favorites\">\n            <Favorites />\n          </Route>\n\n          <Route path=\"**\">\n            <NotFound />\n          </Route>  \n        </Switch>\n    </Router>\n  </>\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n        \n    //   </header>\n\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_FAVORITE, REMOVE_FAVORITE} from './actions';\n\nconst initialState = {\n    favorites: {}\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case ADD_FAVORITE:\n            {\n                ;\n                let new_favorites = {...state.favorites};\n                new_favorites[action.payload.key] = action.payload.object;\n                return {...state, favorites: new_favorites};\n            }\n\n        case REMOVE_FAVORITE:\n            {\n                let new_favorites = {...state.favorites};\n                let key = action.payload;\n                delete new_favorites[key];\n                return {...state, favorites: new_favorites};\n            }\n        default:\n            return state;\n    }\n}","import {createStore} from 'redux';\nimport {reducer} from '../redux/reducer';\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}